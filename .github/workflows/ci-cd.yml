name: CI/CD

env:
  IMAGE_NAME: spigot

on:
  push:
    branches:
      - master
      - develop

  pull_request:

  workflow_dispatch:
    inputs:
      version:
        description: "Version of Minecraft ('all', specific version)"
        required: true
        default: "latest"

jobs:
  # https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#tojson
  create-matrix:
    runs-on: ubuntu-latest

    name: Create Matrix

    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - name: Create Matrix
        id: set-matrix
        run: |
          default_versions=($(
              curl -s https://hub.spigotmc.org/versions/ |
              grep -E "*[0-9]\.[0-9]{1,2}(\.[0-9]){0,}?(-pre[0-9]){0,}" -o |
              uniq |
              sed 's/\.$//' |
              sed 's/-pre/~pre/' |
              sort --version-sort |
              sed 's/~pre/-pre/'
          ))

          if [ '${{ github.event_name }}' == 'push' ]; then
              if [ '${{ github.ref }}' == 'refs/heads/master' ]; then
                  versions=("${default_versions[@]}" 'latest')
              elif [ '${{ github.ref }}' == 'refs/heads/develop' ]; then
                  versions=latest
              else
                  exit 1
              fi
          elif [ '${{ github.event_name }}' == 'workflow_dispatch' ]; then
              if [ "${{ github.event.inputs.version }}" == "latest" ]; then
                  # Only get the latest version
                  versions=($(
                      curl -s https://hub.spigotmc.org/versions/ |
                      grep -E "*[0-9]\.[0-9]{1,2}(\.[0-9]){0,}?(-pre[0-9]){0,}" -o |
                      uniq |
                      sed 's/\.$//' |
                      sed 's/-pre/~pre/' |
                      sort --version-sort |
                      sed 's/~pre/-pre/' |
                      tail -n 1
                  ))
              elif [ "${{ github.event.inputs.version }}" == "all" ]; then
                  versions=("${default_versions[@]}")
              else
                  versions=${{ github.event.inputs.version }}
              fi
          else
              exit 1
          fi

          versions_json=$(
              printf '%s\n' "${versions[@]}" |
              jq --raw-input . |
              jq --compact-output --slurp '{spigot:.}'
          )
          echo "::set-output name=matrix::$versions_json"

  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    needs: create-matrix

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.create-matrix.outputs.matrix) }}

    name: Test Spigot ${{ matrix.spigot }}

    steps:
      - uses: actions/checkout@v2

      - name: Set variables
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [ "$VERSION" = 'master' ] && [ '${{ matrix.spigot }}' = 'latest' ] && VERSION=latest
          [ "$VERSION" = 'develop' ] && [ '${{ matrix.spigot }}' = 'latest' ] && VERSION=nightly

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Figure out correct MC version
          if [ "$VERSION" == "latest" ] || [ "$VERSION" == "nightly" ]; then
              SPIGOT_VERSION=$(curl -s https://hub.spigotmc.org/versions/ | grep -E "*[0-9]\.[0-9]{1,2}(\.[0-9]){0,}?(-pre[0-9]){0,}" -o | uniq | sed 's/\.$//' | sed 's/-pre/~pre/' | sort --version-sort | sed 's/~pre/-pre/' | tail -n 1)
          else
              SPIGOT_VERSION=$VERSION
          fi

          echo "::set-env name=VERSION::$VERSION"
          echo "::set-env name=SPIGOT_VERSION::$SPIGOT_VERSION"

      - name: Run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            if [ "$VERSION" == "latest" ] || [ "$VERSION" == "nightly" ]; then
                docker build . --file Dockerfile --build-arg="SPIGOT_URL=https://github.com/D3strukt0r/spigot-build/releases/latest/download/spigot.jar"
            else
                docker build . --file Dockerfile --build-arg="SPIGOT_VERSION=$SPIGOT_VERSION"
            fi
          fi

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: [create-matrix, test]

    runs-on: ubuntu-latest
    if: ( github.event_name == 'push' || github.event_name == 'workflow_dispatch' ) && github.repository == 'D3strukt0r/docker-spigot'

    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.create-matrix.outputs.matrix) }}

    name: Push Spigot ${{ matrix.spigot }}

    steps:
      - uses: actions/checkout@v2

      - name: Set variables
        run: |
          # Change all uppercase to lowercase
          echo "::set-env name=IMAGE_ID::$(echo "${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME" | tr '[A-Z]' '[a-z]')"

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [ "$VERSION" = 'master' ] && [ '${{ matrix.spigot }}' = 'latest' ] && VERSION=latest
          [ "$VERSION" = 'develop' ] && [ '${{ matrix.spigot }}' = 'latest' ] && VERSION=nightly

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Figure out correct MC version
          if [ "$VERSION" == "latest" ] || [ "$VERSION" == "nightly" ]; then
              SPIGOT_VERSION=$(curl -s https://hub.spigotmc.org/versions/ | grep -E "*[0-9]\.[0-9]{1,2}(\.[0-9]){0,}?(-pre[0-9]){0,}" -o | uniq | sed 's/\.$//' | sed 's/-pre/~pre/' | sort --version-sort | sed 's/~pre/-pre/' | tail -n 1)
          else
              SPIGOT_VERSION=$VERSION
          fi

          echo "::set-env name=VERSION::$VERSION"
          echo "::set-env name=SPIGOT_VERSION::$SPIGOT_VERSION"

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_ID:$VERSION --build-arg "SPIGOT_VERSION=$SPIGOT_VERSION"

      - name: Log into registry
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Push image to Docker Hub
        run: docker push $IMAGE_ID:$VERSION
