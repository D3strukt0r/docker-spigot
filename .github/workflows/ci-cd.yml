name: CI/CD

env:
  IMAGE_NAME: spigot

on:
  push:
    branches:
      - "**"
    paths:
      - .github/workflows/ci-cd.yml
      - "docker/**"
      - "**/Dockerfile"

  pull_request:

  workflow_dispatch:
    inputs:
      version:
        description: "Version of Minecraft ('all', specific version)"
        required: true
        default: "latest"

jobs:
  # https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#tojson
  create-matrix:
    runs-on: ubuntu-latest

    name: Create Matrix

    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - name: Create Matrix
        id: set-matrix
        run: |
          default_versions=($(
              curl -s https://hub.spigotmc.org/versions/ |
              grep -E "*[0-9]\.[0-9]{1,2}(\.[0-9]){0,}?(-pre[0-9]){0,}" -o |
              uniq |
              sed 's/\.$//' |
              sed 's/-pre/~pre/' |
              sort --version-sort |
              sed 's/~pre/-pre/'
          ))

          if [ '${{ github.event_name }}' == 'push' ]; then
              if [ '${{ github.ref }}' == 'refs/heads/master' ]; then
                  versions=("${default_versions[@]}" 'latest')
              elif [ '${{ github.ref }}' == 'refs/heads/develop' ]; then
                  versions=latest
              else
                  exit 1
              fi
          elif [ '${{ github.event_name }}' == 'workflow_dispatch' ]; then
              if [ "${{ github.event.inputs.version }}" == "latest" ]; then
                  # Only get the latest version
                  versions=($(
                      curl -s https://hub.spigotmc.org/versions/ |
                      grep -E "*[0-9]\.[0-9]{1,2}(\.[0-9]){0,}?(-pre[0-9]){0,}" -o |
                      uniq |
                      sed 's/\.$//' |
                      sed 's/-pre/~pre/' |
                      sort --version-sort |
                      sed 's/~pre/-pre/' |
                      tail -n 1
                  ))
              elif [ "${{ github.event.inputs.version }}" == "all" ]; then
                  versions=("${default_versions[@]}")
              else
                  versions=${{ github.event.inputs.version }}
              fi
          else
              exit 1
          fi

          versions_json=$(
              printf '%s\n' "${versions[@]}" |
              jq --raw-input . |
              jq --compact-output --slurp '{spigot:.}'
          )
          echo "::set-output name=matrix::$versions_json"

  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    needs: create-matrix

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.create-matrix.outputs.matrix) }}

    name: Test Spigot ${{ matrix.spigot }}

    # https://github.com/marketplace/actions/build-and-push-docker-images#local-registry
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Prepare
        id: prep
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          if [ '${{ matrix.spigot }}' = 'latest' ]; then
              [ "$VERSION" = 'master' ] && VERSION=latest
              [ "$VERSION" = 'develop' ] && VERSION=nightly
          else
              VERSION='${{ matrix.spigot }}'
          fi

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Figure out correct MC version
          if [ "$VERSION" == "latest" ] || [ "$VERSION" == "nightly" ]; then
              SPIGOT_VERSION=$(curl -s https://hub.spigotmc.org/versions/ | grep -E "*[0-9]\.[0-9]{1,2}(\.[0-9]){0,}?(-pre[0-9]){0,}" -o | uniq | sed 's/\.$//' | sed 's/-pre/~pre/' | sort --version-sort | sed 's/~pre/-pre/' | tail -n 1)
          else
              SPIGOT_VERSION=$VERSION
          fi

          echo ::set-output name=version::${VERSION}
          echo ::set-output name=spigotVersion::${SPIGOT_VERSION}

      - name: Setup QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        # with:
        #   # QEMU static binaries Docker image
        #   image: tonistiigi/binfmt:latest # optional, default is "tonistiigi/binfmt"
        #   # Platforms to install (e.g. arm64,riscv64,arm)
        #   platforms: all # optional, default is "all"

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          # Buildx version.
          # version: latest # optional
          # Sets the builder driver to be used
          # driver: docker-container # optional, default is "docker-container"
          # List of additional driver-specific options (eg. image=moby/buildkit:master)
          driver-opts: network=host # optional
          # Flags for buildkitd daemon (since buildx v0.3.0)
          # buildkitd-flags: # optional
          # Sets up docker build command as an alias to docker buildx
          # install: false # optional, default is "false"
          # Switch to this builder instance
          # use: true # optional, default is "true"
          # Optional address for docker socket or context from docker context ls
          # endpoint: # optional

      # https://github.com/marketplace/actions/build-and-push-docker-images#leverage-github-cache
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          # A list of files, directories, and wildcard patterns to cache and restore. See @actions/glob for supported patterns.
          path: /tmp/.buildx-cache/${{ steps.prep.outputs.spigotVersion }}
          # An explicit key for restoring and saving the cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          # An ordered list of keys to use for restoring the cache if no cache hit occurred for key
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build
        if: steps.prep.outputs.version == 'latest' || steps.prep.outputs.version == 'nightly'
        uses: docker/build-push-action@v2
        with:
          # Builder instance (see setup-buildx action)
          # builder: # optional
          # Build's context is the set of files located in the specified PATH or URL
          # context: . # optional, default is git context
          # Path to the Dockerfile
          # file: ./Dockerfile # optional, default is "Dockerfile"
          # List of build-time variables
          build-args: SPIGOT_URL=https://github.com/D3strukt0r/spigot-build/releases/latest/download/spigot.jar # optional
          # List of metadata for an image
          # labels: # optional
          # List of tags
          tags: localhost:5000/name/app1:latest # optional
          # Always attempt to pull a newer version of the image
          # pull: false # optional, default is "false"
          # Sets the target stage to build
          # target: # optional
          # List of extra privileged entitlement (eg. network.host,security.insecure)
          # allow: # optional
          # Do not use cache when building the image
          # no-cache: false # optional, default is "false"
          # List of target platforms for build
          platforms: linux/amd64,linux/arm64,linux/ppc64le,linux/s390x,linux/386,linux/arm/v7,linux/arm/v6 # optional
          # Load is a shorthand for --output=type=docker
          # load: false # optional, default is "false"
          # Push is a shorthand for --output=type=registry
          push: true # optional, default is "false"
          # List of output destinations (format: type=local,dest=path)
          # outputs: # optional
          # List of external cache sources (eg. type=local,src=path/to/dir)
          cache-from: type=local,src=/tmp/.buildx-cache/${{ steps.prep.outputs.spigotVersion }} # optional
          # List of cache export destinations (eg. type=local,dest=path/to/dir)
          cache-to: type=local,dest=/tmp/.buildx-cache/${{ steps.prep.outputs.spigotVersion }} # optional
          # List of secrets to expose to the build (eg. key=value, GIT_AUTH_TOKEN=mytoken)
          # secrets: # optional

      - name: Build
        if: "!(steps.prep.outputs.version == 'latest' || steps.prep.outputs.version == 'nightly')"
        uses: docker/build-push-action@v2
        with:
          # Builder instance (see setup-buildx action)
          # builder: # optional
          # Build's context is the set of files located in the specified PATH or URL
          # context: . # optional, default is git context
          # Path to the Dockerfile
          # file: ./Dockerfile # optional, default is "Dockerfile"
          # List of build-time variables
          build-args: SPIGOT_VERSION=${{ steps.prep.outputs.version }} # optional
          # List of metadata for an image
          # labels: # optional
          # List of tags
          tags: localhost:5000/name/app2:latest # optional
          # Always attempt to pull a newer version of the image
          # pull: false # optional, default is "false"
          # Sets the target stage to build
          # target: # optional
          # List of extra privileged entitlement (eg. network.host,security.insecure)
          # allow: # optional
          # Do not use cache when building the image
          # no-cache: false # optional, default is "false"
          # List of target platforms for build
          platforms: linux/amd64,linux/arm64,linux/ppc64le,linux/s390x,linux/386,linux/arm/v7,linux/arm/v6 # optional
          # Load is a shorthand for --output=type=docker
          # load: false # optional, default is "false"
          # Push is a shorthand for --output=type=registry
          push: true # optional, default is "false"
          # List of output destinations (format: type=local,dest=path)
          # outputs: # optional
          # List of external cache sources (eg. type=local,src=path/to/dir)
          cache-from: type=local,src=/tmp/.buildx-cache/${{ steps.prep.outputs.spigotVersion }} # optional
          # List of cache export destinations (eg. type=local,dest=path/to/dir)
          cache-to: type=local,dest=/tmp/.buildx-cache/${{ steps.prep.outputs.spigotVersion }} # optional
          # List of secrets to expose to the build (eg. key=value, GIT_AUTH_TOKEN=mytoken)
          # secrets: # optional

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  deploy:
    # Ensure test job passes before pushing image.
    needs: [create-matrix, test]

    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop') && github.repository == 'D3strukt0r/docker-spigot'

    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.create-matrix.outputs.matrix) }}

    name: Push Spigot ${{ matrix.spigot }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE="$(echo "${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME" | tr '[A-Z]' '[a-z]')"

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Rename branches which stand for latest or similar
          if [ '${{ matrix.spigot }}' = 'latest' ]; then
            if [ "$VERSION" = '${{ github.event.repository.default_branch }}' ]; then
              VERSION=latest
            elif [ "$VERSION" = 'develop' ]; then
              VERSION=nightly
            else
              # Rename my/branch to my-branch
              VERSION=$(echo "$VERSION" | sed -r 's#/+#-#g')
            fi
          else
            VERSION='${{ matrix.spigot }}'
          fi

          # Strip "v" prefix from tag name
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=$(echo $VERSION | sed -e 's/^v//')
          fi

          # Figure out correct MC version
          if [ "$VERSION" == "latest" ] || [ "$VERSION" == "nightly" ]; then
              SPIGOT_VERSION=$(
                curl -s https://hub.spigotmc.org/versions/ |
                grep -E "*[0-9]\.[0-9]{1,2}(\.[0-9]){0,}?(-pre[0-9]){0,}" -o | uniq | sed 's/\.$//' |
                sed 's/-pre/~pre/' |
                sort --version-sort |
                sed 's/~pre/-pre/' |
                tail -n 1
              )
          else
              SPIGOT_VERSION=$VERSION
          fi

          # Create tags
          TAGS="${DOCKER_IMAGE}:${VERSION}"

          echo ::set-output name=version::${VERSION}
          echo ::set-output name=spigotVersion::${SPIGOT_VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      - name: Setup QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        # with:
        #   # QEMU static binaries Docker image
        #   image: tonistiigi/binfmt:latest # optional, default is "tonistiigi/binfmt"
        #   # Platforms to install (e.g. arm64,riscv64,arm)
        #   platforms: all # optional, default is "all"

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          # Buildx version.
          version: latest # optional
          # Sets the builder driver to be used
          # driver: docker-container # optional, default is "docker-container"
          # List of additional driver-specific options (eg. image=moby/buildkit:master)
          # driver-opts: | # optional
          #   image=moby/buildkit:master
          #   network=host
          # Flags for buildkitd daemon (since buildx v0.3.0)
          # buildkitd-flags: # optional
          # Sets up docker build command as an alias to docker buildx
          # install: false # optional, default is "false"
          # Switch to this builder instance
          # use: true # optional, default is "true"
          # Optional address for docker socket or context from docker context ls
          # endpoint: # optional

      # https://github.com/marketplace/actions/build-and-push-docker-images#leverage-github-cache
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          # A list of files, directories, and wildcard patterns to cache and restore. See @actions/glob for supported patterns.
          path: /tmp/.buildx-cache/${{ steps.prep.outputs.spigotVersion }}
          # An explicit key for restoring and saving the cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          # An ordered list of keys to use for restoring the cache if no cache hit occurred for key
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          # Server address of Docker registry. If not set then will default to Docker Hub
          # registry: # optional, default is docker registry
          # Username used to log against the Docker registry
          username: ${{ secrets.DOCKER_USERNAME }}
          # Password or personal access token used to log against the Docker registry
          password: ${{ secrets.DOCKER_PASSWORD }}
          # Log out from the Docker registry at the end of a job
          # logout: true # optional, default is "true"

      - name: Build and push
        if: steps.prep.outputs.version == 'latest' || steps.prep.outputs.version == 'nightly'
        id: docker_build_api_php
        uses: docker/build-push-action@v2
        with:
          # Builder instance (see setup-buildx action)
          # builder:
          # Build's context is the set of files located in the specified PATH or URL
          # context: . # default is "<Git context>"
          # Path to the Dockerfile
          # file: ./Dockerfile # default is "Dockerfile"
          # List of build-time variables
          build-args: SPIGOT_URL=https://github.com/D3strukt0r/spigot-build/releases/latest/download/spigot.jar # optional
          # List of metadata for an image
          # https://github.com/opencontainers/image-spec/blob/master/annotations.md
          labels: | # optional
            maintainer=Manuele Vaccari <manuele.vaccari@gmail.com>
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.title=${{ github.event.repository.name }}
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}
          # List of tags
          tags: ${{ steps.prep.outputs.tags }}
          # Always attempt to pull a newer version of the image
          # pull: false # optional, default is "false"
          # Sets the target stage to build
          # target: # optional
          # List of extra privileged entitlement (eg. network.host,security.insecure)
          # allow: # optional
          # Do not use cache when building the image
          # no-cache: false # optional, default is "false"
          # List of target platforms for build
          platforms: linux/amd64,linux/arm64,linux/ppc64le,linux/s390x,linux/386,linux/arm/v7,linux/arm/v6 # optional
          # Load is a shorthand for --output=type=docker
          # load: false # optional, default is "false"
          # Push is a shorthand for --output=type=registry
          push: ${{ github.event_name != 'pull_request' }} # optional, default is "false"
          # List of output destinations (format: type=local,dest=path)
          # outputs: # optional
          # List of external cache sources (eg. type=local,src=path/to/dir)
          cache-from: type=local,src=/tmp/.buildx-cache/${{ steps.prep.outputs.spigotVersion }} # optional
          # List of cache export destinations (eg. type=local,dest=path/to/dir)
          cache-to: type=local,dest=/tmp/.buildx-cache/${{ steps.prep.outputs.spigotVersion }} # optional
          # List of secrets to expose to the build (eg. key=value, GIT_AUTH_TOKEN=mytoken)
          # secrets: # optional

      - name: Build and push
        if: "!(steps.prep.outputs.version == 'latest' || steps.prep.outputs.version == 'nightly')"
        id: docker_build_api_nginx
        uses: docker/build-push-action@v2
        with:
          # Builder instance (see setup-buildx action)
          # builder:
          # Build's context is the set of files located in the specified PATH or URL
          # context: . # default is "<Git context>"
          # Path to the Dockerfile
          # file: ./Dockerfile # default is "Dockerfile"
          # List of build-time variables
          build-args: SPIGOT_VERSION=${{ steps.prep.outputs.version }} # optional
          # List of metadata for an image
          # https://github.com/opencontainers/image-spec/blob/master/annotations.md
          labels: | # optional
            maintainer=Manuele Vaccari <manuele.vaccari@gmail.com>
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.title=${{ github.event.repository.name }}
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}
          # List of tags
          tags: ${{ steps.prep.outputs.tags }}
          # Always attempt to pull a newer version of the image
          # pull: false # optional, default is "false"
          # Sets the target stage to build
          # target: # optional
          # List of extra privileged entitlement (eg. network.host,security.insecure)
          # allow: # optional
          # Do not use cache when building the image
          # no-cache: false # optional, default is "false"
          # List of target platforms for build
          platforms: linux/amd64,linux/arm64,linux/ppc64le,linux/s390x,linux/386,linux/arm/v7,linux/arm/v6 # optional
          # Load is a shorthand for --output=type=docker
          # load: false # optional, default is "false"
          # Push is a shorthand for --output=type=registry
          push: ${{ github.event_name != 'pull_request' }} # optional, default is "false"
          # List of output destinations (format: type=local,dest=path)
          # outputs: # optional
          # List of external cache sources (eg. type=local,src=path/to/dir)
          cache-from: type=local,src=/tmp/.buildx-cache/${{ steps.prep.outputs.spigotVersion }} # optional
          # List of cache export destinations (eg. type=local,dest=path/to/dir)
          cache-to: type=local,dest=/tmp/.buildx-cache/${{ steps.prep.outputs.spigotVersion }} # optional
          # List of secrets to expose to the build (eg. key=value, GIT_AUTH_TOKEN=mytoken)
          # secrets: # optional
